AWSTemplateFormatVersion: "2010-09-09"
Description: Minecraft Spot Price Server via Docker / ECS
Parameters:

  ECSAMI:
    Description: AWS ECS AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  ServerState:
    Type: String
    Description: "Running: A spot instance will launch shortly after setting this parameter; your Minecraft server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Minecraft container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues: 
    - Running
    - Stopped

  InstanceType:
    Type: String
    Description: "t3.medium is a good cost-effective instance, 2 vCPUs and 3.75 GB of RAM with moderate network performance. Change at your discretion. https://aws.amazon.com/ec2/instance-types/."
    Default: t3.medium

  SpotPrice:
    Type: String
    Description: "A t3.medium shouldn't cost much more than a cent per hour. Note: Leave this blank to use on-demand pricing."
    Default: "0.05"

  ContainerInsights:
    Type: String
    Description: "Enable/Disable ECS Container Insights for ECS Cluster"
    Default: disabled
    AllowedValues:
    - enabled
    - disabled

  EntryPoint:
    Type: CommaDelimitedList
    Description: "Task entrypoint (Optional - image default is script /start)"

  Command:
    Type: CommaDelimitedList
    Description: "Task command (Optional - image default is empty)"

  LogGroupName:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  LogGroupRetentionInDays:
    Type: Number
    Description: (Log retention in days)
    Default: 7

  LogStreamPrefix:
    Type: String
    Description: (Optional)
    Default: 'minecraft-server'

  KeyPairName:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIPv4:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIPv6:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  HostedZoneId:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply the hosted zone ID here.
    Default: ''

  RecordName:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply the name of the record here (e.g. minecraft.mydomain.com).
    Default: ''

  MinecraftImageTag:
    Type: String
    Description: "Java version (Examples include latest, adopt13, openj9, etc) Refer to tag descriptions available here: https://github.com/itzg/docker-minecraft-server)"
    Default: 'latest'

  MinecraftTypeTag:
    Type: String
    Description: "(Examples include SPIGOT, BUKKIT, TUINITY, etc) Refer to tag descriptions available here: https://github.com/itzg/docker-minecraft-server)"

  AdminPlayerNames:
    Type: String
    Description: Op/Administrator Players
    Default: ''

  Difficulty:
    Type: String
    Description: "The game's difficulty"
    Default: unspecified
    AllowedValues:
    - unspecified
    - peaceful
    - easy
    - normal
    - hard

  EnforceWhitelist:
    Type: String
    Description: Whenever the server should enforce whitelist
    Default: unspecified
    AllowedValues:
      - unspecified
      - true
      - false

  Whitelist:
    Type: String
    Description: Usernames of your friends to whitelist
    Default: ''

  MinecraftVersion:
    Type: String
    Description: Server minecraft version
    Default: ''

  ForgeVersion:
    Type: String
    Description: If using forge type optionally provide version

  PackwizUrl:
    Type: String
    Description: Url to packwiz provider

  SpawnProtection:
    Type: String
    Description: Distance in blocks from spawn

  AllowFlight:
    Type: String
    Description: Should be enabled for some features in mods to work properly.
    Default: unspecified
    AllowedValues:
      - unspecified
      - true
      - false

  UseAikarFlags:
    Type: String
    Description: "https://aikar.co/2018/07/02/tuning-the-jvm-g1gc-garbage-collector-flags-for-minecraft/"
    Default: false
    AllowedValues:
      - true
      - false

  MessageOfTheDay:
    Type: String
    Description: Text message of the day

  TailscaleKey:
    NoEcho: true
    Type: String
    Description: Tailscale auth key. May be of any kind, but for security preferred non-reusable

  TailscaleHostname:
    Type: String
    Description: Hostname for the server within tailscale network

  Memory:
    Type: String
    Description: How much Memory to allocate for the JVM
    Default: '1G'

  Seed:
    Type: String
    Description: The seed used to generate the world

  MaxPlayers:
    Type: Number
    Description: Max number of players that can connect simultaneously (default 20)
    Default: -1

  ViewDistance:
    Type: Number
    Description: Max view radius (in chunks) the server will send to the client (default 10)
    Default: -1

  GameMode:
    Type: String
    Description: "Options: creative, survival (default), adventure, spectator (v1.8+)"
    Default: unspecified
    AllowedValues:
    - unspecified
    - creative
    - survival
    - adventure
    - spectator

  LevelType:
    Type: String
    Description: "Options: DEFAULT, FLAT, LARGEBIOMES, AMPLIFIED, CUSTOMIZED, BUFFET, BIOMESOP (v1.12-), BIOMESOPLENTY (v1.15+), TERRAFORGED"
    Default: unspecified
    AllowedValues:
    - unspecified
    - DEFAULT
    - FLAT
    - LARGEBIOMES
    - AMPLIFIED
    - CUSTOMIZED
    - BUFFET
    - BIOMESOP
    - BIOMESOPLENTY
    - TERRAFORGED

  EnableRollingLogs:
    Type: String
    Description: "By default the log file will grow without limit. Set to true to use a rolling log strategy."
    Default: false
    AllowedValues:
    - true
    - false

  Timezone:
    Type: String
    Description: "Change the server's timezone. Use the canonical name of the format: Area/Location (e.g. America/New_York)"

  SmartStart:
    Type: String
    Description: "Whenever smart start feature should be enabled. Requires to use tailscale in order to work properly, with non ephemeral key"
    Default: false
    AllowedValues:
      - true
      - false

  SmartStartInstanceType:
    Type: String
    Description: "Image for the standby server. Should be minimal to optimize cost. Default t3.nano"
    Default: t3.nano

  SmartStartSpotPrice:
    Type: String
    Description: "A t3.nano shouldn't cost much. 0.004 is the minimum spot price"
    Default: "0.004"

  SmartStartAmi:
    Description: AWS AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2

  InitPeriod:
    Type: Number
    Description: Time in seconds for server to be declared inactive after startup
    Default: 1800

  EstablishedPeriod:
    Type: Number
    Description: Time in seconds for server to be declared inactive after connection was established
    Default: 3600

  CheckFrequency:
    Type: Number
    Description: Time in seconds between player count checks
    Default: 10

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: Essential Configuration
        Parameters:
        - ServerState
        - InstanceType
        - SpotPrice
      - Label:
          default: Server Settings
        Parameters:
        - MinecraftImageTag
      - Label:
          default: Optional Server Settings
        Parameters:
        - MessageOfTheDay
        - MinecraftTypeTag
        - ForgeVersion
        - PackwizUrl
        - SpawnProtection
        - AllowFlight
        - UseAikarFlags
        - AdminPlayerNames
        - Difficulty
        - EnforceWhitelist
        - Whitelist
        - MinecraftVersion
        - Memory
        - Seed
        - MaxPlayers
        - ViewDistance
        - GameMode
        - LevelType
        - EnableRollingLogs
        - Timezone
      - Label:
          default: Optional ECS Cluster and Task Configuration
        Parameters:
        - ContainerInsights
        - EntryPoint
        - Command
        - LogGroupName
        - LogGroupRetentionInDays
        - LogStreamPrefix
      - Label: 
          default: Optional Remote Access (SSH) Configuration
        Parameters:
        - KeyPairName
        - YourIPv4
        - YourIPv6
        - TailscaleKey
        - TailscaleHostname
      - Label:
          default: Smart Start Configuration
        Parameters:
        - SmartStart
        - SmartStartInstanceType
        - SmartStartSpotPrice
        - InitPeriod
        - EstablishedPeriod
        - CheckFrequency
        - SmartStartAmi
      - Label: 
          default: Optional DNS Configuration
        Parameters:
        - HostedZoneId
        - RecordName
    ParameterLabels:
      ServerState:
        default: "Update this parameter to shut down / start up your Minecraft server as required to save on cost. Takes a few minutes to take effect."
      InstanceType:
        default: "Which instance type? You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      SpotPrice:
        default: "Maximum spot price per hour? Leave blank to disable spot pricing."
      MinecraftImageTag:
        default: "Which version of Minecraft do you want to launch?"
      MinecraftTypeTag:
        default: "Which type of Minecraft do you want to launch?"
      AdminPlayerNames:
        default: "A comma delimited list (no spaces) of player names to be admins"
      Difficulty:
        default: "Which difficulty?"
      UseAikarFlags:
        default: "Use aikar flags"
      MessageOfTheDay:
        default: "Motd"
      EnforceWhitelist:
        default: "Enforce whitelist?"
      Whitelist:
        default: "A comma delimited list (no spaces) of player names"
      MinecraftVersion:
        default: "Minecraft version ie 1.16.3"
      ContainerInsights:
        default: "ECS Container Insights provide additional container metrics, and supports collection of Prometheus metrics.  Additional AWS charges may apply."
      EntryPoint:
        default: "Task/container --entrypoint, comma separated e.g. /bin/bash,-c"
      Command:
        default: "Task/container command, comma separated arguments passed to entrypoint"
      LogGroupName:
        default: "Create CloudWatch Log Group with this name e.g. /Minecraft or /ecs/minecraft, and direct container logs there"
      LogGroupRetentionInDays:
        default: "Number of days to retain CloudWatch logs"
      LogStreamPrefix:
        default: "Prefix for container log stream e.g. minecraft-server"
      KeyPairName:
        default: "If you wish to access the instance via SSH, select a Key Pair to use. https://console.aws.amazon.com/ec2/v2/home?#KeyPairs:sort=keyName"
      YourIPv4:
        default: "If you wish to access the instance via SSH and using IPv4, provide it."
      YourIPv6:
        default: "If you wish to access the instance via SSH and using IPv6, provide it."
      HostedZoneId:
        default: "If you have a hosted zone in Route 53 and wish to update a DNS record whenever your Minecraft instance starts, supply the hosted zone ID here."
      RecordName:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Minecraft instance starts, supply a record name here (e.g. minecraft.mydomain.com)."
      Memory:
        default: "If you wish to increase the Java memory-heap limit of 1GB. Format: <size>[g|G|m|M|k|K]"
      Seed:
        default: "Seed for world generation"
      MaxPlayers:
        default: "Max simultaneous players"
      ViewDistance:
        default: "Max view distance"
      GameMode:
        default: "The Minecraft game mode"
      LevelType:
        default: "Level type for world generation"
      ForgeVersion:
        default: "Forge version"
      PackwizUrl:
        default: "Packwiz url"
      SpawnProtection:
        default: "Spawn protection"
      AllowFlight:
        default: "Allow flight?"
      TailscaleKey:
        default: "Tailscale key"
      TailscaleHostname:
        default: "Tailscale hostname"
      SmartStart:
        default: "Smart start enabled?"
      SmartStartSpotPrice:
        default: "Maximum standby spot price per hour. Leave blank to disable spot pricing."
      SmartStartInstanceType:
        default: "Instance type for standby server. You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      InitPeriod:
        default: "Initial timeout"
      EstablishedPeriod:
        default: "Established timeout"
      CheckFrequency:
        default: "Check frequency"
      EnableRollingLogs:
        default: "Whether to enable rolling logs"
      Timezone:
        default: "The server's timezone"

Conditions:
  MinecraftTypeTagProvided: !Not [ !Equals [ !Ref MinecraftTypeTag, '' ] ]
  AdminPlayerNamesProvided: !Not [ !Equals [ !Ref AdminPlayerNames, '' ] ]
  DifficultyProvided: !Not [ !Equals [ !Ref Difficulty, 'unspecified' ] ]
  EnforceWhitelistProvided: !Not [ !Equals [ !Ref EnforceWhitelist, 'unspecified' ] ]
  WhitelistProvided: !Not [ !Equals [ !Ref Whitelist, '' ] ]
  MinecraftVersionProvided: !Not [ !Equals [ !Ref MinecraftVersion, '' ] ]
  EntryPointProvided: !Not [ !Equals [ !Join [ "", !Ref EntryPoint ], '' ] ]
  CommandProvided: !Not [ !Equals [ !Join [ "", !Ref Command ], '' ] ]
  LogGroupNameProvided: !Not [ !Equals [ !Ref LogGroupName, '' ] ]
  LogStreamPrefixProvided:  !Not [ !Equals [ !Ref LogStreamPrefix, '' ] ]
  KeyPairNameProvided: !Not [ !Equals [ !Ref KeyPairName, '' ] ]
  IPv4AddressProvided: !Not [ !Equals [ !Ref YourIPv4, '' ] ]
  IPv6AddressProvided: !Not [ !Equals [ !Ref YourIPv6, '' ] ]
  DnsConfigEnabled: !And [ !Not [ !Equals [ !Ref HostedZoneId, '' ] ], !Not [ !Equals [ !Ref RecordName, '' ] ] ]
  SpotPriceProvided: !Not [ !Equals [ !Ref SpotPrice, '' ] ]
  SmartStartSpotPriceProvided: !Not [ !Equals [ !Ref SmartStartSpotPrice, '' ] ]
  MemoryProvided: !Not [ !Equals [ !Ref Memory, '' ] ]
  SeedProvided: !Not [ !Equals [ !Ref Seed, '' ] ]
  MaxPlayersProvided: !Not [ !Equals [ !Ref MaxPlayers, -1 ] ]
  ViewDistanceProvided: !Not [ !Equals [ !Ref ViewDistance, -1 ] ]
  GameModeProvided: !Not [ !Equals [ !Ref GameMode, 'unspecified' ] ]
  LevelTypeProvided: !Not [ !Equals [ !Ref LevelType, 'unspecified' ] ]
  ForgeVersionProvided: !Not [ !Equals [ !Ref ForgeVersion, '' ] ]
  PackwizUrlProvided: !Not [ !Equals [ !Ref PackwizUrl, '' ] ]
  SpawnProtectionProvided: !Not [ !Equals [ !Ref SpawnProtection, '' ] ]
  AllowFlightProvided: !Not [ !Equals [ !Ref AllowFlight, 'unspecified' ] ]
  TailscaleKeyProvided: !Not [ !Equals [ !Ref TailscaleKey, '' ] ]
  TailscaleHostnameProvided: !Not [ !Equals [ !Ref TailscaleHostname, '' ] ]
  MessageOfTheDayProvided: !Not [ !Equals [ !Ref MessageOfTheDay, ''] ]
  SmartStartEnabled: !And [!Equals [ !Ref SmartStart, 'true'], !Condition TailscaleKeyProvided ]
  EnableRollingLogsProvided: !Not [ !Equals [ !Ref EnableRollingLogs, '' ] ]
  TimezoneProvided: !Not [ !Equals [ !Ref Timezone, '' ] ]


Mappings:
  ServerState:
    Running:
      DesiredCapacity: 1
    Stopped:
      DesiredCapacity: 0

Resources:

  # ====================================================
  # BASIC VPC
  # ====================================================

  Vpc: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.100.0.0/26
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - !GetAZs 
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc  

  SubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB  

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 1
      - !GetAZs 
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc    

  Route:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # ====================================================
  # EFS FOR PERSISTENT DATA
  # ====================================================

  Efs:
    Type: AWS::EFS::FileSystem
    Properties: {}

  MountA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  MountB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  EfsSg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-efs"
      GroupDescription: !Sub "${AWS::StackName}-efs"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg
      VpcId: !Ref Vpc
      
  # ====================================================
  # INSTANCE CONFIG
  # ====================================================

  Ec2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-ec2"
      GroupDescription: !Sub "${AWS::StackName}-ec2"
      SecurityGroupIngress:
      - !If
        - IPv4AddressProvided 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIPv4}/32"
        - !Ref 'AWS::NoValue'
      - !If
        - IPv6AddressProvided 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIpv6: !Sub "${YourIPv6}/128"
        - !Ref 'AWS::NoValue'
      - !If
        - TailscaleKeyProvided
        - FromPort: 41641
          ToPort: 41641
          IpProtocol: udp
          CidrIp: 0.0.0.0/0
        - FromPort: 25565
          ToPort: 25565
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      - !If
        - TailscaleKeyProvided
        - FromPort: 3478
          ToPort: 3478
          IpProtocol: udp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref Ec2Sg
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        MetadataOptions:
          InstanceMetadataTags: 'enabled'
        ImageId: !Ref ECSAMI
        InstanceType: !Ref InstanceType
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        InstanceMarketOptions:
          !If
          - SpotPriceProvided
          - MarketType: 'spot'
            SpotOptions:
              MaxPrice: !Ref SpotPrice
          - !Ref 'AWS::NoValue'
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -xe
              echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
              yum install -y amazon-efs-utils
              mkdir /opt/minecraft
              mount -t efs ${Efs}:/ /opt/minecraft
              chown 845:845 /opt/minecraft
              ${extra_tailscale_steps}
            - EcsCluster: !Ref EcsCluster
              Efs: !Ref Efs
              extra_tailscale_steps: !If
                - TailscaleKeyProvided
                - !Sub
                  - |
                    yum update gnupg2 -y
                    yum install yum-utils -y
                    yum-config-manager --add-repo https://pkgs.tailscale.com/stable/amazon-linux/2/tailscale.repo
                    yum install tailscale -y
                    sed -i 's+/var/lib/tailscale/tailscaled.state+/opt/minecraft/tailscaled.state+g' /usr/lib/systemd/system/tailscaled.service
                    systemctl daemon-reload
                    systemctl enable --now tailscaled
                    tailscale up --accept-dns=false --auth-key ${TailscaleKey}${hostnameFlag}
                  - TailscaleKey: !Ref TailscaleKey
                    hostnameFlag: !If
                      - TailscaleHostnameProvided
                      - !Sub ' --hostname ${TailscaleHostname}'
                      - ''
                - ''

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - MountA
    - MountB
    - InternetGatewayAttachment
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      DesiredCapacity: !If
        - SmartStartEnabled
        - 0
        - !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false
      Tags:
        - Key: role
          PropagateAtLaunch: true
          Value: "node"
      MaxSize: 1
      MinSize: 0
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
    Metadata:
      LaunchEvent: !If [ DnsConfigEnabled, !GetAtt LaunchEvent.Arn, "" ]

  InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: AmazonEC2ContainerServiceforEC2Role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:DescribeTags"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "ecs:CreateCluster"
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:RequestTag/aws:cloudformation:stack-id: !Sub "${AWS::StackId}"
                    aws:RequestTag/role: "node"
              - Effect: "Allow"
                Action:
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:Submit*"
                Resource: !GetAtt EcsCluster.Arn
              - Effect: "Allow"
                Action:
                  - "ecs:Poll"
                  - "ecs:StartTelemetrySession"
                  - "ecs:UpdateContainerInstancesState"
                Resource: "*"
                Condition:
                  StringEquals:
                    ecs:cluster: !GetAtt EcsCluster.Arn
              - !If
                - LogGroupNameProvided
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: !GetAtt CloudWatchLogGroup.Arn
                - !Ref 'AWS::NoValue'
        - !If
          - SmartStartEnabled
          - PolicyName: AllowSendEvents
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "events:PutEvents"
                  Resource: "*"
                  Condition:
                    StringEquals:
                      events:source:
                        - 'oros.mcs'
                      events:detail-type:
                       - 'Server inactive'
                       - 'Server ready'
          - !Ref 'AWS::NoValue'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref InstanceRole

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      ClusterSettings:
        - Name: containerInsights
          Value: !Ref ContainerInsights

  ECSCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling:
          MaximumScalingStepSize: 1
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100

  EcsClusterCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviders:
        - !Ref ECSCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1

  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - AutoScalingGroup
      - EcsClusterCapacityProviderAssociation
    Properties: 
      Cluster: !Ref EcsCluster
      DesiredCount: !If
        - SmartStartEnabled
        - 0
        - !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service"
      TaskDefinition: !Ref EcsTask  
      CapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1
          Base: 0
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Volumes:
      - Host:
          SourcePath: /opt/minecraft
        Name: minecraft
      NetworkMode: "bridge"
      ContainerDefinitions:      
        - Name: minecraft
          MemoryReservation: 1024
          Image: !Sub "itzg/minecraft-server:${MinecraftImageTag}"
          EntryPoint: !If
              - EntryPointProvided
              - !Ref EntryPoint
              - !Ref 'AWS::NoValue'
          Command: !If
              - CommandProvided
              - !Ref Command
              - !Ref 'AWS::NoValue'
          PortMappings:
          - ContainerPort: 25565
            HostPort: 25565
            Protocol: tcp
          HealthCheck:
            Command:
              - CMD-SHELL
              - mc-health
            Interval: 30
            Retries: 10
            StartPeriod: 60
          LogConfiguration:
            !If
            - LogGroupNameProvided
            - LogDriver: awslogs
              Options:
                awslogs-group: !Ref CloudWatchLogGroup
                awslogs-stream-prefix: !If
                - LogStreamPrefixProvided
                - !Sub ${LogStreamPrefix}
                - !Ref 'AWS::NoValue'
                awslogs-region: !Ref AWS::Region
                awslogs-create-group: true
            - !Ref 'AWS::NoValue'
          MountPoints:
          - ContainerPath: /data
            SourceVolume: minecraft
            ReadOnly: false
          Environment:
            - Name: "EULA"
              Value: "TRUE"
            - !If
              - MinecraftTypeTagProvided
              - Name: "TYPE"
                Value: !Sub "${MinecraftTypeTag}"
              - !Ref 'AWS::NoValue'
            - !If
              - AdminPlayerNamesProvided
              - Name: "OPS"
                Value: !Sub "${AdminPlayerNames}"
              - !Ref 'AWS::NoValue'
            - !If
              - DifficultyProvided
              - Name: "DIFFICULTY"
                Value: !Sub "${Difficulty}"
              - !Ref 'AWS::NoValue'
            - !If
              - EnforceWhitelistProvided
              - Name: "ENFORCE_WHITELIST"
                Value: !Sub "${EnforceWhitelist}"
              - !Ref 'AWS::NoValue'
            - !If
              - WhitelistProvided
              - Name: "WHITELIST"
                Value: !Sub "${Whitelist}"
              - !Ref 'AWS::NoValue'
            - !If
              - MinecraftVersionProvided
              - Name: "VERSION"
                Value: !Sub "${MinecraftVersion}"
              - !Ref 'AWS::NoValue'
            - !If
              - MemoryProvided
              - Name: "MEMORY"
                Value: !Sub "${Memory}"
              - !Ref 'AWS::NoValue'
            - !If
              - SeedProvided
              - Name: "SEED"
                Value: !Sub "${Seed}"
              - !Ref 'AWS::NoValue'
            - !If
              - MaxPlayersProvided
              - Name: "MAX_PLAYERS"
                Value: !Sub "${MaxPlayers}"
              - !Ref 'AWS::NoValue'
            - !If
              - ViewDistanceProvided
              - Name: "VIEW_DISTANCE"
                Value: !Sub "${ViewDistance}"
              - !Ref 'AWS::NoValue'
            - !If
              - GameModeProvided
              - Name: "MODE"
                Value: !Sub "${GameMode}"
              - !Ref 'AWS::NoValue'
            - !If
              - LevelTypeProvided
              - Name: "LEVEL_TYPE"
                Value: !Sub "${LevelType}"
              - !Ref 'AWS::NoValue'
            - !If
              - ForgeVersionProvided
              - Name: "FORGEVERSION"
                Value: !Sub "${ForgeVersion}"
              - !Ref 'AWS::NoValue'
            - !If
              - PackwizUrlProvided
              - Name: "PACKWIZ_URL"
                Value: !Sub "${PackwizUrl}"
              - !Ref 'AWS::NoValue'
            - !If
              - SpawnProtectionProvided
              - Name: "SPAWN_PROTECTION"
                Value: !Sub "${SpawnProtection}"
              - !Ref 'AWS::NoValue'
            - !If
              - AllowFlightProvided
              - Name: "ALLOW_FLIGHT"
                Value: !Sub "${AllowFlight}"
              - !Ref 'AWS::NoValue'
            - Name: "USE_AIKAR_FLAGS"
              Value: !Sub "${UseAikarFlags}"
            - !If
              - MessageOfTheDayProvided
              - Name: "MOTD"
                Value: !Sub "${MessageOfTheDay}"
              - !Ref 'AWS::NoValue'
            - !If
              - EnableRollingLogsProvided
              - Name: "ENABLE_ROLLING_LOGS"
                Value: !Sub "${EnableRollingLogs}"
              - !Ref 'AWS::NoValue'
            - !If
              - TimezoneProvided
              - Name: "TZ"
                Value: !Sub "${Timezone}"
              - !Ref 'AWS::NoValue'
        - !If
          - SmartStartEnabled
          - Name: mc-monitor
            Image: "itzg/mc-monitor"
            MemoryReservation: 128
            Command:
             - "export-for-prometheus"
             - "--servers"
             - "minecraft"
            Links:
              - "minecraft:minecraft"
          - !Ref 'AWS::NoValue'
        - !If
          - SmartStartEnabled
          - Name: mc-event
            Image: "or0s/mc-inactive-aws-event"
            MemoryReservation: 128
            Links:
              - "mc-monitor:mc-monitor"
            Environment:
              - Name: "HOST"
                Value: "mc-monitor"
              - Name: "AUTOSTOP_TIMEOUT_INIT"
                Value: !Sub "${InitPeriod}"
              - Name: "AUTOSTOP_TIMEOUT_EST"
                Value: !Sub "${EstablishedPeriod}"
              - Name: "AUTOSTOP_PERIOD"
                Value: !Sub "${CheckFrequency}"
          - !Ref 'AWS::NoValue'

  CloudWatchLogGroup:
    Condition: LogGroupNameProvided
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${LogGroupName}"
      RetentionInDays: !Sub "${LogGroupRetentionInDays}"

  # ====================================================
  # Tailscale smart start
  # ====================================================

  InstanceRoleStandby:
    Type: AWS::IAM::Role
    Condition: SmartStartEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowSendEvents
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "events:PutEvents"
                Resource: "*"
                Condition:
                  StringEquals:
                    events:source:
                      - 'oros.mcs'
                    events:detail-type: 'Standby join attempt'

  InstanceProfileStandby:
    Type: AWS::IAM::InstanceProfile
    Condition: SmartStartEnabled
    Properties:
      Roles:
        - !Ref InstanceRoleStandby

  LaunchTemplateStandby:
    Type: AWS::EC2::LaunchTemplate
    Condition: SmartStartEnabled
    Properties:
      LaunchTemplateData:
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref Ec2Sg
        IamInstanceProfile:
          Name: !Ref InstanceProfileStandby
        MetadataOptions:
          InstanceMetadataTags: 'enabled'
        ImageId: !Ref SmartStartAmi
        InstanceType: !Ref SmartStartInstanceType
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        InstanceMarketOptions:
          !If
          - SmartStartSpotPriceProvided
          - MarketType: 'spot'
            SpotOptions:
              MaxPrice: !Ref SmartStartSpotPrice
          - !Ref 'AWS::NoValue'
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash -xe
              yum install -y amazon-efs-utils
              mkdir /opt/minecraft
              mount -t efs ${Efs}:/ /opt/minecraft
              chown 845:845 /opt/minecraft
              yum update gnupg2 -y
              yum install yum-utils git -y
              yum-config-manager --add-repo https://pkgs.tailscale.com/stable/amazon-linux/2/tailscale.repo
              yum install tailscale -y
              sed -i 's+/var/lib/tailscale/tailscaled.state+/opt/minecraft/tailscaled.state+g' /usr/lib/systemd/system/tailscaled.service
              systemctl daemon-reload
              systemctl enable --now tailscaled
              tailscale up --accept-dns=false --auth-key ${TailscaleKey}${hostname}
              git clone https://github.com/123oro321/minecraft-standby.git
              cd minecraft-standby/
              chmod +x install.sh
              ./install.sh
              cd ..
              rm -rf minecraft-standby/sh
            - EcsCluster: !Ref EcsCluster
              Efs: !Ref Efs
              TailscaleKey: !Ref TailscaleKey
              hostname: !If
                - TailscaleHostnameProvided
                - !Sub ' --hostname ${TailscaleHostname}'
                - ''

  AutoScalingGroupStandby:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: SmartStartEnabled
    DependsOn:
      - MountA
      - MountB
      - InternetGatewayAttachment
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-standby-asg"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState, DesiredCapacity ]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateStandby
        Version: !GetAtt LaunchTemplateStandby.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false
      Tags:
        - Key: role
          PropagateAtLaunch: true
          Value: "standby"
      MaxSize: 1
      MinSize: 0
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
    Metadata:
      LaunchEvent: !If [ DnsConfigEnabled, !GetAtt LaunchEvent.Arn, "" ]

  ActivateLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: SmartStartEnabled
    Properties:
      FunctionName: !Ref SwitchStateLambda
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeActivateRule.Arn

  EventBridgeActivateRule:
    Type: AWS::Events::Rule
    Condition: SmartStartEnabled
    Properties:
      State: ENABLED
      EventPattern:
        source:
          - 'oros.mcs'
        detail-type:
          - 'Standby join attempt'
        detail:
          stack:
            - !Ref 'AWS::StackName'
      Targets:
        - Arn: !GetAtt SwitchStateLambda.Arn
          Id: "SwitchStateLambda"
          Input: '{"state": "active"}'

  StandbyLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: SmartStartEnabled
    Properties:
      FunctionName: !Ref SwitchStateLambda
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeStandbyRule.Arn

  EventBridgeStandbyRule:
    Type: AWS::Events::Rule
    Condition: SmartStartEnabled
    Properties:
      State: ENABLED
      EventPattern:
        source:
          - 'oros.mcs'
        detail-type:
          - 'Server inactive'
        detail:
          stack:
            - !Ref 'AWS::StackName'
      Targets:
        - Arn: !GetAtt SwitchStateLambda.Arn
          Id: "SwitchStateLambda"
          Input: '{"state": "standby"}'

  ScaleRole:
    Type: AWS::IAM::Role
    Condition: SmartStartEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowChangeScaleGroupCapacity
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                 - "autoscaling:SetDesiredCapacity"
                Resource:
                - !Sub "arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroupStandby}"
                - !Sub "arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AutoScalingGroup}"
        - PolicyName: AllowChangeEcsService
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecs:UpdateService"
                Resource:
                  - !Ref EcsService

  SwitchStateLambda:
    Type: "AWS::Lambda::Function"
    Condition: SmartStartEnabled
    Properties:
      Environment:
        Variables:
          StandbySg: !Ref AutoScalingGroupStandby
          ActiveSg: !Ref AutoScalingGroup
          EcsCluster: !Ref EcsCluster
          EcsService: !Ref EcsService
      Code:
        ZipFile: |
          import boto3
          import os
          def handler(event, context):
            val_standby = {
              "active": 0,
              "standby": 1,
              "disabled": 0,
            }
            val_active = {
              "active": 1,
              "standby": 0,
              "disabled": 0,
            }
            action = event['state']
            autoscaling = boto3.client('autoscaling')
            ecs = boto3.client('ecs')
            autoscaling.set_desired_capacity(
              AutoScalingGroupName=os.environ['StandbySg'],
              DesiredCapacity=val_standby[action]
            )
            if action == "active":
              autoscaling.set_desired_capacity(
                AutoScalingGroupName=os.environ['ActiveSg'],
                DesiredCapacity=val_active[action]
              )
              ecs.update_service(
                cluster=os.environ['EcsCluster'],
                service=os.environ['EcsService'],
                desiredCount=val_active[action]
              )
            else:
              ecs.update_service(
                cluster=os.environ['EcsCluster'],
                service=os.environ['EcsService'],
                desiredCount=val_active[action]
              )
              autoscaling.set_desired_capacity(
                AutoScalingGroupName=os.environ['ActiveSg'],
                DesiredCapacity=val_active[action]
              )
      Description: Scale down standby server and start the real one.
      FunctionName: !Sub "${AWS::StackName}-switch-state"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt ScaleRole.Arn
      Runtime: python3.9
      Timeout: 20
  # ====================================================
  # SET DNS RECORD TODO fix integration with smart start and return tailscale start on server ready? and turn off button
  # ====================================================

  SetDNSRecordLambdaRole:
    Type: AWS::IAM::Role
    Condition: DnsConfigEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: root
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "route53:ChangeResourceRecordSets"
                Resource: !Sub "arn:${AWS::Partition}:route53:::hostedzone/${HostedZoneId}"
              - Effect: "Allow"
                Action: "ec2:DescribeInstance*"
                Resource: "*"

  SetDNSRecordLambda:
    Type: "AWS::Lambda::Function"
    Condition: DnsConfigEnabled
    Properties: 
      Environment:
        Variables:
          HostedZoneId: !Ref HostedZoneId
          RecordName: !Ref RecordName
      Code:
        ZipFile: |
          import boto3
          import os
          def handler(event, context):
            new_instance = boto3.resource('ec2').Instance(event['detail']['EC2InstanceId'])
            boto3.client('route53').change_resource_record_sets(
              HostedZoneId= os.environ['HostedZoneId'],
              ChangeBatch={
                  'Comment': 'updating',
                  'Changes': [
                      {
                          'Action': 'UPSERT',
                          'ResourceRecordSet': {
                              'Name': os.environ['RecordName'],
                              'Type': 'A',
                              'TTL': 60,
                              'ResourceRecords': [
                                  {
                                      'Value': new_instance.public_ip_address
                                  },
                              ]
                          }
                      },
                  ]
              })
      Description: Sets Route 53 DNS Record for Minecraft
      FunctionName: !Sub "${AWS::StackName}-set-dns"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SetDNSRecordLambdaRole.Arn
      Runtime: python3.7
      Timeout: 20

  LaunchEvent:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties: 
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
          - !Sub "${AWS::StackName}-asg"
      Name: !Sub "${AWS::StackName}-instance-launch"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "${AWS::StackName}-set-dns"

  LaunchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent.Arn

Outputs:
  CheckInstanceIp:
    Description: To find your Minecraft instance IP address, visit the following link. Click on the instance to find its Public IP address.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#Instances:tag:aws:autoscaling:groupName=${AutoScalingGroup};sort=tag:Name"
